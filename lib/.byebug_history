exit
@names.count
@names
self
exit
@scores
exit
@names
 @pinfalls
@scores
exit
@names
exit
self
@points
exit
@points
@names
 @points.select { |key,_| @names << key }
get_names
exit
@points
points
get_names(points)
get_names({@points})
get_names(self.@points)
#{@points}
@points
get_names(@points)
@points
get_names
continue
exit
self
exit
@points
self
exit
continue
exit
@points
self
@frame_points
player_frames
exit
self
exit
self
exit
self
exit
@points[]
@points
self@pints
self
exit
@scores
@score
continue
exit
pinfall[1][0]
pinfall[1]
pinfall[0]
pinfall
@pinfalls[0].size
index
exit
eixt
player_frames[index+1]exit
player_frames[index+1]
player_frames[index]
score
index
exit
player_frames.size - 2
player_frames.size
player_frames.size - 1
player_frames
index
infex
continue
index
continue
index
exit
score
exit
score
exit
p.size
p
exit
@pinfalls[0]
@pinfalls
p.size
p
exit
exi
@scores
self
ScoreboardTable.inspect
ScoreboardTable
Scoreboard
exit
@pinfalls
@scores
@points
self
self.bowling
self["points"]
self.points
self
exit
all_foul_scores
[all_foul_scores, pinfall_equal_generator("F")]
player_frames
all_foul?(player_frames)
exit
player_frames
continue
player_frames
exit
pinfall
new_array
exit
new_array
exit
player_frames
exit
player_frames
all_foul?(player_frames)
perfect_game?(player_frames)
exit
player_frames
all_foul?(player_frames)
all_foul?
exit
clear
ext
 perfect_game_calculator(player_frames)
exit
perfect_game_calculator(player_frames)
exit
 perfect_game_calculator(player_frames)
exit
score[1]
score[0]
score
exit
score
exit
FrameScore::MAX_PINFALLS_IN_A_GAME
exit
points
continue
exit
points
exit
second_next_frame
total += 10 + second_next_frame
next
exit
points
exit
second_next_frame = second_next_frame
second_next_frame == "10"
index
exit
points
exit
second_next_frame == second_next_frameexi
second_next_frame
second_next_frame == "10"
if second_next_frame == "10"
next
second_next_frame = player_frames[index + 2]
player_frames[index + 1] == "10"
next
index
continue
index
continue
exit
points
exit
continue
 second_next_frame = player_frames[index + 2]
second_next_frame = player_frames[index + 2][0]
player_frames[index + 1] == "10"
elsif player_frames[index + 1] == "10"
next
player_frames[index + 1] == "10"
player_frames[index + 1] != "10"   
index
continue
index
continue
exit
player_frames
index
continue
index
score
continue
player_frames[index + 1]
score
exit
points
exit
player_frames[index + 1].size == 2
points
index
continue
index
score
continue
player_frames
index
score
exit
points
exit
points
exit
points
exit
continue
total + (points[index - 1] || 0)
points
score
continue
total
score
total
total + (points[index - 1] || 0)
continue
total + (points[index - 1] || 0)
score
total + (points[index - 1] || 0)
continue
 (points[index - 1] || 0)
 (points[index - 1] if index > 0 || 0)
 (points[index - 1] if index > 0)
points[index]
points[index - 1]
 (points[index - 1] if index > 0)
points[index - 1] if index > 0
points[index - 1]
exit
points
points << total
total
continue
total
exit
score
